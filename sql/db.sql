/*
SQLyog  v12.2.6 (64 bit)
MySQL - 5.7.3-m13 : Database - db_diary
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`db_diary` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `db_diary`;

/*Table structure for table `t_diary` */

DROP TABLE IF EXISTS `t_diary`;

CREATE TABLE `t_diary` (
  `diaryid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(60) DEFAULT NULL,
  `content` text,
  `typeid` int(11) DEFAULT NULL,
  `release_date` datetime DEFAULT NULL,
  PRIMARY KEY (`diaryid`),
  KEY `typeid` (`typeid`),
  CONSTRAINT `t_diary_ibfk_1` FOREIGN KEY (`typeid`) REFERENCES `t_diarytype` (`diary_typeid`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8;

/*Data for the table `t_diary` */

insert  into `t_diary`(`diaryid`,`title`,`content`,`typeid`,`release_date`) values 
(44,'mysql中关联查询','<p>查询这块是重中之重, 关系到系统反应时间. 项目做到后期, 都是要做性能测试和性能优化的, 优化的时候, 数据库这块是一个大头.</p>\r\n\r\n<p>sql格式: select 列名/* from 表名 where 条件 group by 列 having 条件 order by 列 asc/desc;</p>\r\n\r\n<p>这里牵涉到一个查询执行顺序的问题.&nbsp;</p>\r\n\r\n<p>单表查询执行顺序:&nbsp;</p>\r\n\r\n<pre>\r\nselect sex, count(Sex) as count from tch_teacher where id &gt; 15 group by Sex having count &gt; 5 order by Sex asc limit 1;</pre>\r\n\r\n<p>1-&gt; from 表 : 首先拿到表tch_teacher</p>\r\n\r\n<p>2-&gt; where 条件 : 根据where后面的条件筛选一遍数据集合A</p>\r\n\r\n<p>3-&gt; group by 分组 : 对筛选出的数据A, 根据group by后面的列进行分组, 得到数据集B</p>\r\n\r\n<p>4-&gt; having 筛选 : 对数据集B进行进一步筛选, 得到数据集C</p>\r\n\r\n<p>5-&gt; select 数据 : 这里有四步</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;第一步 : 根据select后面的列名, 去数据集C中取数据. 得到数据集D</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;第二步 : 对数据集D中的数据进行去重操作(这一步是建立在 sql中有distinct 情况下), 得到数据集E</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;第三步 : 对数据集E进行排序操作, 得到数据集F</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;第四步 : 对数据集F进行截取数据操作, 得到最终的数据集(执行 limit 10 操作)</p>\r\n\r\n<p>&nbsp;在多表的时候, 优化器在优化的时候, 会有些区别, 有些地方, 会用到where条件, 然后才连表</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>一、连表查询</p>\r\n\r\n<p>1. 交叉连接 -- 笛卡尔乘积 &nbsp;cross join</p>\r\n\r\n<pre>\r\nselect * from tch_teacher cross join tch_contact</pre>\r\n\r\n<p>这种连接方式, 没见人用过. &nbsp;如果tch_teacher,tch_contact表各有10条数据, 那么连接的结果, 就是 10 x 10 = 100 条数据.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/640690/201612/640690-20161226092153664-656425601.png\" /></p>\r\n\r\n<p>在mysql 中, cross join 后面是可以跟 on 和 where 的, 加上之后, 其实跟 inner join 是一样的</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2. 内连接 -- inner join&nbsp;</p>\r\n\r\n<p>内连接在不加on的情况下, 也是去求笛卡尔乘积. 不加on的用法并不推荐使用, 容易造成内存溢出的情况. 加on的时候, 在连表的时候, 就会对数据进行筛选, 以此来缩减有效数据范围</p>\r\n\r\n<pre>\r\nselect * from tch_teacher inner join tch_contact </pre>\r\n\r\n<p>&nbsp;<img alt=\"\" src=\"http://images2015.cnblogs.com/blog/640690/201612/640690-20161226092935476-852141787.png\" /></p>\r\n\r\n<p>从上面的sql和图片来看, inner join 的时候, 可以不加on, 也能得到一个结果, 而且这个结果和交叉连接的结果是一样的.&nbsp;</p>\r\n\r\n<p>&nbsp;这里还有另外两种写法:</p>\r\n\r\n<pre>\r\nselect * from tch_teacher,tch_contact\r\n\r\nselect * from tch_teacher join tch_contact</pre>\r\n\r\n<p>得到的结果是一样的.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>3. 外连接 -- left/right join on&nbsp;</p>\r\n\r\n<p>这里我特意加了一个on在上面, 因为不加on是会报错的.</p>\r\n\r\n<p>left join 称之为左连接, 连接以左侧表数据为准, 当右表没有数据与之匹配的时候, 则会用null填补</p>\r\n\r\n<p>right join 称之为右连接, 与 left join 相反, 这个是以右表为准</p>\r\n\r\n<p>先看下效果吧</p>\r\n\r\n<pre>\r\nselect * from tch_teacher left join tch_contact on tch_teacher.Id = tch_contact.TId;</pre>\r\n\r\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/640690/201612/640690-20161226094052054-1234405295.png\" /></p>\r\n\r\n<pre>\r\nselect * from tch_teacher right join tch_contact on tch_teacher.Id = tch_contact.TId;</pre>\r\n\r\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/640690/201612/640690-20161226094123898-193160625.png\" /></p>\r\n\r\n<p>其实这里还有一个full join , 不过mysql里面的full join, 着实有些让人无语, 反正我没这么用过, 略过不表了.</p>\r\n\r\n<p>这里我做了一个小测试, 这里的数据, tch_contact的tid值, 我取的是0~100000之间的随机数</p>\r\n\r\n<pre>\r\nselect * from tch_teacher inner join tch_contact on tch_teacher.Id = tch_contact.TId ;\r\n\r\nselect * from tch_teacher LEFT join tch_contact on tch_teacher.Id = tch_contact.TId ;</pre>\r\n\r\n<table border=\"0\">\r\n	<tbody>\r\n		<tr>\r\n			<td>tch_teacher</td>\r\n			<td>tch_contact</td>\r\n			<td>inner join(s)</td>\r\n			<td>结果</td>\r\n			<td>left join(s)</td>\r\n			<td>结果</td>\r\n		</tr>\r\n		<tr>\r\n			<td>十万</td>\r\n			<td>十万</td>\r\n			<td>0.499</td>\r\n			<td>99999</td>\r\n			<td>0.526</td>\r\n			<td>137017</td>\r\n		</tr>\r\n		<tr>\r\n			<td>十万+5000</td>\r\n			<td>十万</td>\r\n			<td>0.345</td>\r\n			<td>99999</td>\r\n			<td>0.565</td>\r\n			<td>142017</td>\r\n		</tr>\r\n		<tr>\r\n			<td>十万-5000</td>\r\n			<td>十万</td>\r\n			<td>0.472</td>\r\n			<td>94949</td>\r\n			<td>0.534</td>\r\n			<td>130124</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>这里面的值, 是我反复运行之后, 在一些离散值里面, 取得比较靠近中心点的值.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>4. 自己连自己</p>\r\n\r\n<p>mysql里面, 有一个比较好用的功能, 就是自己连自己. 我再tch_teacher表里面加入一列, CreateBy, &nbsp;存放的是这个表的Id值</p>\r\n\r\n<pre>\r\nselect a.*, b.Name as CreateByName from tch_teacher a\r\nleft join tch_teacher b on a.createby = b.id</pre>\r\n\r\n<p>能得到以下结果:</p>\r\n\r\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/640690/201612/640690-20161226112438164-1434193311.png\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;二、union查询</p>\r\n\r\n<p>除了把几个表通过内部关系拼成一个表结果, 还可以, 把多个表的查询表结果拼成一个表结果. 所使用的方法就是union.</p>\r\n\r\n<p>这里要注意的是, 列的顺序. 如果害怕列的顺序不一致不好排查, 可以把表结果的列名都重命名为相同的.</p>\r\n\r\n<pre>\r\nselect Id, Sex, BId, `No`, Name, CreateDate from tch_teacher\r\n\r\nunion\r\n\r\nselect 0 as Id, Sex, BId, `No`, Name, CreateDate from tch_teacher_temp</pre>\r\n\r\n<p>union是会对最后的表结果进行去重操作的, 如果我不想去重, 只想快速得到拼接的结果, 可以使用 union all 来拼接.&nbsp;</p>\r\n',3,'2017-11-06 12:59:25'),
(45,'测试数据8','<p>测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8测试数据8</p>\r\n',1,'2017-11-06 13:01:14'),
(46,'测试数据7','<p>测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7测试数据7</p>\r\n',4,'2017-11-06 13:01:27'),
(47,'测试数据6','<p>测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6测试数据6</p>\r\n',2,'2017-11-06 13:01:34'),
(48,'测试数据5','<p>测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5测试数据5</p>\r\n',1,'2017-11-06 13:01:42'),
(49,'测试数据4','<p>测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4测试数据4</p>\r\n',1,'2017-11-06 13:01:50'),
(50,'测试数据3','<p>测试数据3测试数据3测试数据3测试数据3测试数据3测试数据3测试数据3测试数据3测试数据3</p>\r\n',3,'2017-11-06 13:02:14'),
(51,'测试数据2','<p>11111111111111111111111</p>\r\n',2,'2017-11-06 13:02:23'),
(52,'测试数据1','<p>测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1测试数据1</p>\r\n',2,'2017-11-06 13:02:34'),
(53,'Java使用split(\".\")出错抛出ArrayIndexOutOfBoundsException','<p>Java使用split(&quot;.&quot;)出错抛出ArrayIndexOutOfBoundsException<br />\r\n<br />\r\n使用情景：<br />\r\n<br />\r\n今天在项目中使用split截取图片时抛出了一个截取代码后如下：<br />\r\n<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Test<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public void testSpit() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s[] = &quot;boy.jpg&quot;.split(&quot;.&quot;);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt;= s.length; i++) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s[i]);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\r\n<br />\r\n<br />\r\n<br />\r\n执行上段代码抛出以下异常：<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.ArrayIndexOutOfBoundsException: 0<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at Junit5.testSpit(Junit5.java:92)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.reflect.Method.invoke(Method.java:497)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:289)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\n<br />\r\n解决办法：<br />\r\n<br />\r\n然后我去查api才发现，split()方法接受的是正则表达式，所以传入的&quot;.&quot;就变成了正则表达式的关键字，表示除换行符之外的任意字符。所以，**这里需要转义&quot;\\\\.&quot;或&quot;[.]&quot;**。<br />\r\n<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Test<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;public void testSpit() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s[] = &quot;boy.jpg&quot;.split(&quot;\\\\.&quot;);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(s[i]);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\r\n<br />\r\n<br />\r\n![](https://i.imgur.com/PWQVaom.jpg)<br />\r\n<br />\r\n搞定！<br />\r\n<br />\r\n更新时间:2017/9/2 23:03:19&nbsp;</p>\r\n',3,'2017-11-10 10:11:08'),
(54,'Tomcat服务器执行一段时间后，报错Error parsing HTTP request header','<p><img alt=\"\" src=\"https://i.imgur.com/HVTFIv2.jpg\" style=\"height:278px; width:700px\" /></p>\r\n\r\n<pre>\r\n<code>[2017-10-19 10:00:23,499] Artifact MybatisNotes:war exploded: Deploy took 2,492 milliseconds\r\n19-Oct-2017 22:00:29.626 信息 [http-nio-8888-exec-8] org.apache.coyote.http11.Http11Processor.service Error parsing HTTP request header\r\n Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.\r\n java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens\r\n    at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:422)\r\n</code>\r\n</pre>\r\n\r\n<p>不知道为什么Tomcat使用一段时间后，再次启动就会出现如上异常，在网上找了半天，有说是缓存设置的太小了，也有说可能是项目里的jar发生冲突引起的。两种我都试了，第一种设置后没作用。第二种我把Tomcat卸载干净后重新安装,再启动还是会报错。</p>\r\n\r\n<p>不知道什么原因，又看了很多回答有的说是跟http和端口有关。于是我又换了一个端口号，就不报错了。</p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/XlxgDFt.jpg\" style=\"height:137px; width:700px\" /></p>\r\n\r\n<p>但是却不知道这是为什么，如果有哪位大神知道，还请赐教：）</p>\r\n\r\n<p>2017/10/19 22:18:20</p>\r\n',3,'2017-11-10 10:14:21'),
(55,'怎么解决eclipse的项目导入idea后注释乱码的问题','<h2>导入整个项目后出现乱码的情况</h2>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/v9d5laX.png\" /></p>\r\n\r\n<p>最方便的是用<strong>IDEA</strong>的<strong>import project</strong>导入整个项目，这样<strong>IDEA</strong>能够检测到项目原来的编码方式，如果出现中文乱码它会提示你当前编码错误，让你改成gbk编码。</p>\r\n\r\n<p>就像这样：&nbsp;<br />\r\n<img alt=\"\" src=\"https://i.imgur.com/45ZVCzE.png\" style=\"height:456px; width:700px\" /></p>\r\n\r\n<p>如果你刚导入项目就遇见这种情况，你可直接点击右上角的链接（<code>Reload in another encoding</code>），也可以选择右下角的UTF-8(File Encoding)，将其修改为GBK。</p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/OHUtdKl.png\" style=\"height:513px; width:700px\" /></p>\r\n\r\n<p>改成GBK后，你会发现乱码已将改成了中文，但是文件的编码还是GBK。&nbsp;<br />\r\n那么我们如何将文件的编码改为UTF-8呢？</p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/7trErzF.png\" style=\"height:473px; width:700px\" /></p>\r\n\r\n<p>首先，点击右下角的文件编码GBK</p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/mmy7r9A.png\" style=\"height:383px; width:700px\" /></p>\r\n\r\n<p>选择UTF-8，选择<strong>convert</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/zU1PbXt.png\" style=\"height:406px; width:700px\" /></p>\r\n\r\n<p>这样文件的编码就变成了UTF-8</p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/Ng5Y6jy.png\" style=\"height:441px; width:700px\" /></p>\r\n\r\n<h2><a name=\"t2\"></a>直接复制文件到Idea后乱码的情况</h2>\r\n\r\n<p>我用上面同样的解决办法，把文件复制到idea就解决不了，它还依然是乱码</p>\r\n\r\n<p><img alt=\"\" src=\"https://i.imgur.com/LJSn9mg.jpg\" /></p>\r\n\r\n<p>然后我用editplus把gbk的文件编码改成utf-8，在复制粘贴到idea中，就没有乱码。</p>\r\n\r\n<p>2017/10/26 22:53:01</p>\r\n',3,'2017-11-10 10:17:41'),
(56,'java设计模式-01单例模式','<h3>设计模式（Design Pattern）</h3>\r\n\r\n<p>是一套被反复使用、多数人只晓得、经过分类编目、代码设计经验的总结。</p>\r\n\r\n<p><strong>目的</strong></p>\r\n\r\n<p>使用能够设计模式是为了可重用代码、让代码更容易被他人理解、保证代码的可靠性。</p>\r\n\r\n<h3><a name=\"t1\"></a>单例模式</h3>\r\n\r\n<p><strong>作用：</strong>保证整个应用程序中某个实例有且只有一个。</p>\r\n\r\n<p><strong>类型：</strong>饿汉模式、懒汉模式。</p>\r\n\r\n<p>饿汉模式特点</p>\r\n\r\n<p>加载类时比较慢，但运行时对象的获取熟读比较快。（线程安全）</p>\r\n\r\n<pre>\r\n<code>package singleton.hungrymode;\r\n\r\n/**\r\n * Created by Hoictas on 2017/10/9.\r\n */\r\npublic class HungryModeDemo {\r\n    //1.将构造方法私有化，不允许外部直接创建对象\r\n    private HungryModeDemo() {\r\n    }\r\n\r\n    //2.创建类的唯一实例\r\n    private static HungryModeDemo hungryModeDemo = new HungryModeDemo();\r\n\r\n    //3.提供一个用于获取实例的方法，使用public static修饰\r\n    public static HungryModeDemo getInstance() {\r\n        return hungryModeDemo;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        HungryModeDemo hungryModeDemo1 = HungryModeDemo.getInstance();\r\n        HungryModeDemo hungryModeDemo2 = HungryModeDemo.getInstance();\r\n        System.out.println(hungryModeDemo1);\r\n        System.out.println(hungryModeDemo2);\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>懒汉模式特点</p>\r\n\r\n<p>加载类时比较快，但运行时对象的获取速度比较慢。（线程不安全）</p>\r\n\r\n<pre>\r\n<code>package singleton.lazymode;\r\n\r\n\r\n/**\r\n * Created by Hoictas on 2017/10/9.\r\n */\r\npublic class LazyModeDemo {\r\n    //1.将构造方法私有化，不允许外部直接创建对象\r\n    private LazyModeDemo() {\r\n    }\r\n\r\n    //2.声明类的唯一实例,使用public static修饰\r\n    private static LazyModeDemo lazyModeDemo;\r\n\r\n    //3.提供一个用于获取实例的方法，使用public static修饰\r\n    public static LazyModeDemo getInstance() {\r\n        if (lazyModeDemo == null) {\r\n            lazyModeDemo = new LazyModeDemo();\r\n        }\r\n        return lazyModeDemo;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LazyModeDemo lazyModeDemo1 = LazyModeDemo.getInstance();\r\n        LazyModeDemo lazyModeDemo2 = LazyModeDemo.getInstance();\r\n        System.out.println(lazyModeDemo1);\r\n        System.out.println(lazyModeDemo2);\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2017/10/11 18:35:16</p>\r\n',3,'2017-11-10 10:21:01'),
(57,'Spring学习笔记','Spring学习笔记\r\n==========\r\n\r\n----------\r\nBean的配置方式：\r\n1.通过XML文件配置',3,'2017-11-15 01:34:43'),
(58,'开源在线 Markdown 编辑器','### 主要特性\r\n\r\n- 支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；\r\n- 支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；\r\n- 支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；\r\n- 支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;\r\n- 支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；\r\n- 支持 AMD / CMD 模块化加载（支持 Require.js & Sea.js），并且支持自定义扩展插件；\r\n- 兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；\r\n- 支持自定义主题样式；\r\n\r\n# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2\r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\nGFM a-tail link @pandao\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似`<pre>`预格式化文本(Preformatted Text)的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test(){\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function(){\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str){\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str){\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <title>Hello world!</title>\r\n    </head>\r\n    <body>\r\n        <h1>Hello world!</h1>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/examples/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n                    \r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n                \r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n### End',19,'2017-11-23 00:06:17'),
(59,'当 Spring4 和 Hibernate4 整合后，事务不起作用','当 Spring4 和 Hibernate4 整合后，事务不起作用\r\n============================\r\n\r\n----------\r\n\r\n\r\n**解决办法:通过Spring的SessionFactory的getCurrentSession的方法创建Session**\r\n\r\n#### 一、首先说一下hibernate中创建用来连接数据库的Session，有两种方式。 ####\r\n1. 通过Spring的SessionFactory的getCurrentSession的方法创建Session 。\r\n2. 通过Spring的SessionFactory的OpenSession的方法创建Session。\r\n\r\ngetCurrentSession 创建的Session会绑定到当前线程中去，commit或rollback后会，自动关闭Session。<br>\r\n\r\nOpenSession 重新开启一个线程创建Session，需要手动关闭Session，如果不关闭将导致session关联的数据库连接无法释放，最后资源耗尽而使程序当掉。<br>\r\n\r\n#### 二、而当Hibernate利用Spring中的绑定事务来配置的时候如下图： ####\r\n\r\n\r\n    <context:component-scan base-package=\"com.tiakon.note.spring.dao\"/>\r\n    <context:component-scan base-package=\"com.tiakon.note.spring.service\"/>\r\n    <!--1.配置数据源-->\r\n    <!--1.1导入资源文件-->\r\n    <context:property-placeholder location=\"classpath:db.properties\"/>\r\n\r\n    <bean id=\"comboPooledDataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\r\n        <property name=\"user\" value=\"${jdbc.user}\"/>\r\n        <property name=\"password\" value=\"${jdbc.password}\"/>\r\n        <property name=\"driverClass\" value=\"${jdbc.driverClass}\"/>\r\n        <property name=\"jdbcUrl\" value=\"${jdbc.jdbcUrl}\"/>\r\n        <property name=\"initialPoolSize\" value=\"${jdbc.initialPoolSize}\"/>\r\n        <property name=\"maxPoolSize\" value=\"${jdbc.maxPoolSize}\"/>\r\n    </bean>\r\n    <!--2.配置Hibernate的SessionFactory 实例：通过Spring提供的：LocalSessionFactoryBean进行配置-->\r\n    <bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\r\n        <!--2.1配置数据源属性-->\r\n        <property name=\"dataSource\" ref=\"comboPooledDataSource\"/>\r\n        <!--2.2配置hibernate配置文件的位置及名称-->\r\n        <property name=\"configLocation\" value=\"classpath:hibernate.cfg.xml\"/>\r\n        <!--2.3配置hibernate映射文件的位置及名称，可以使用通配符-->\r\n        <property name=\"mappingResources\">\r\n            <list>\r\n                <value>HiAccountEntity.hbm.xml</value>\r\n                <value>HiBookEntity.hbm.xml</value>\r\n            </list>\r\n        </property>\r\n    </bean>\r\n    <!--3.配置Spring声明式事务-->\r\n    <!--3.1配置事务管理器-->\r\n    <bean id=\"hibernateTransactionManager\" class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\">\r\n        <property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\r\n    </bean>\r\n    <!--3.2配置事务属性，需要事务管理器-->\r\n    <tx:advice transaction-manager=\"hibernateTransactionManager\" id=\"transactionInterceptor\">\r\n        <tx:attributes>\r\n            <!--<tx:method name=\"purchase\" propagation=\"REQUIRED\"/>-->\r\n            <tx:method name=\"get*\" read-only=\"true\"/>\r\n            <tx:method name=\"*\"/>\r\n        </tx:attributes>\r\n    </tx:advice>\r\n    <!--3.3配置事务切点，并把切点和事务属性关联起来-->\r\n    <aop:config>\r\n        <aop:pointcut id=\"txPointcut\" expression=\"execution(* com.tiakon.note.spring.service.*.*(..))\"/>\r\n        <aop:advisor advice-ref=\"transactionInterceptor\" pointcut-ref=\"txPointcut\"/>\r\n    </aop:config>\r\n</beans>\r\n\r\n\r\n配置事务是，需要将数据库中的数据源，注入 HibernateTransactionManager可以说，事务的配置是，针对于数据库来说的。(我是这么理解的)<br>\r\n\r\n所以，当我们采用OpenSession来创建Session来连接数据库的话，和事务连接数据库是两个线程的操作，所以事务根本不会起作用。<br>\r\n\r\n应该采用getCurrentSession进行session的创建。<br>',19,'2017-11-23 17:21:59');

/*Table structure for table `t_diarytype` */

DROP TABLE IF EXISTS `t_diarytype`;

CREATE TABLE `t_diarytype` (
  `diary_typeid` int(11) NOT NULL AUTO_INCREMENT,
  `typename` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`diary_typeid`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

/*Data for the table `t_diarytype` */

insert  into `t_diarytype`(`diary_typeid`,`typename`) values 
(1,'工作类'),
(2,'生活类'),
(3,'学习类'),
(4,'心得类'),
(16,'娱乐类'),
(17,'技术类'),
(18,'旅游类'),
(19,'java'),
(20,'css');

/*Table structure for table `t_user` */

DROP TABLE IF EXISTS `t_user`;

CREATE TABLE `t_user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) DEFAULT NULL,
  `password` varchar(50) DEFAULT NULL,
  `nickname` varchar(20) DEFAULT NULL,
  `imagename` varchar(50) DEFAULT NULL,
  `mood` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `t_user` */

insert  into `t_user`(`user_id`,`username`,`password`,`nickname`,`imagename`,`mood`) values 
(1,'tiakon','ICy5YqxZB1uWSwcVLSNLcA==','Tiakon','20171124003337.jpg','生活是一种态度');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
